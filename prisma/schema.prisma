generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  name            String
  password        String
  profileImage    String?
  profilePublicId String?
  profileColor    String
  gender          Gender?
  role            Role?
  dateOfBirth     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  appointments    Appointments[]
  Doctor          Doctors?
  transactions    Transaction[]
}

model Doctors {
  id              Int               @id @default(autoincrement())
  userId          Int               @unique
  specialty       Specialty
  degree          String
  experience      Int
  fee             Int
  about           String?           @db.Text
  isActive        Boolean           @default(true)
  profile         Users             @relation(fields: [userId], references: [id])
  addresses       Json
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Appointment     Appointments[]
  DoctorSchedules DoctorSchedules[]
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum Specialty {
  GeneralPhysician
  Gynecologist
  Dermatologist
  Pediatrician
  Neurologist
  Gastroenterologist
  Psychologist
  Cardiologist
  OrthopedicSurgeon
}

model Appointments {
  id              Int           @id @default(autoincrement())
  appointmentDate DateTime
  patientId       Int
  patient         Users         @relation(fields: [patientId], references: [id])
  doctorId        Int
  doctor          Doctors       @relation(fields: [doctorId], references: [id])
  isCancel        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transactions    Transaction[]
}

model Transaction {
  id                    Int      @id @default(autoincrement())
  appointmentId         Int?
  userId                Int?
  stripePaymentIntentId String
  amount                Float
  status                String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  appointment Appointments? @relation(fields: [appointmentId], references: [id])
  user        Users?        @relation(fields: [userId], references: [id])
}

model DoctorSchedules {
  scheduleId Int       @id @default(autoincrement())
  doctorId   Int
  day        DayOfWeek
  duration   Int       @default(30)
  startTime  String
  endTime    String

  doctor Doctors @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
